
MIRROR_TOUCH_2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000888  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000a  00800060  00000888  000008fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000906  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 000000f0  00000000  00000000  00000936  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000011bd  00000000  00000000  00000a26  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000005ad  00000000  00000000  00001be3  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000591  00000000  00000000  00002190  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  0000023c  00000000  00000000  00002724  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000009f7  00000000  00000000  00002960  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000988  00000000  00000000  00003357  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 000000a0  00000000  00000000  00003cdf  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 e8       	ldi	r30, 0x88	; 136
  68:	f8 e0       	ldi	r31, 0x08	; 8
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	aa 36       	cpi	r26, 0x6A	; 106
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 73 01 	call	0x2e6	; 0x2e6 <main>
  7a:	0c 94 42 04 	jmp	0x884	; 0x884 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <ADC_INIT>:
 *  Author: ideapad510
 */ 
#include "adcmodule.h"

	void ADC_INIT (ADC_PRESCALE P,ADC_VOLT_REF VF,ADC_MODE MODE ,ADC_INTERRUPT_MODE INT_STATE,ADC_ADJUST ADC_DATA_ORDER)
	{
  82:	0f 93       	push	r16
		ADMUX_ACCESS=0x00;
  84:	17 b8       	out	0x07, r1	; 7
		ADMUX_ACCESS|=VF|ADC_DATA_ORDER;	
  86:	97 b1       	in	r25, 0x07	; 7
  88:	09 2b       	or	r16, r25
  8a:	60 2b       	or	r22, r16
  8c:	67 b9       	out	0x07, r22	; 7
		ADC_CTRL_STATUS_ACCESS = P|MODE|(1<<7)|INT_STATE;
  8e:	20 68       	ori	r18, 0x80	; 128
  90:	82 2b       	or	r24, r18
  92:	28 2f       	mov	r18, r24
  94:	24 2b       	or	r18, r20
  96:	26 b9       	out	0x06, r18	; 6
		switch (MODE)
  98:	41 15       	cp	r20, r1
  9a:	51 05       	cpc	r21, r1
  9c:	31 f0       	breq	.+12     	; 0xaa <ADC_INIT+0x28>
		{case SINGLE_MODE:break;
			default:
				  SFIOR&=0x1F;
  9e:	80 b7       	in	r24, 0x30	; 48
  a0:	8f 71       	andi	r24, 0x1F	; 31
  a2:	80 bf       	out	0x30, r24	; 48
			      SFIOR|=(MODE>>8);
  a4:	80 b7       	in	r24, 0x30	; 48
  a6:	85 2b       	or	r24, r21
  a8:	80 bf       	out	0x30, r24	; 48
				  break;
		}
		
	}
  aa:	0f 91       	pop	r16
  ac:	08 95       	ret

000000ae <ADC_READ>:
	{
		clearbit(ADC_CTRL_STATUS_ACCESS,7);/*disable*/
		
	}
	uint16 ADC_READ(ADC_CHANNEL channel,ADC_RESOLUTION resolution)
	{ ADMUX_ACCESS&=0xE0;
  ae:	97 b1       	in	r25, 0x07	; 7
  b0:	90 7e       	andi	r25, 0xE0	; 224
  b2:	97 b9       	out	0x07, r25	; 7
		ADMUX_ACCESS|=channel;
  b4:	97 b1       	in	r25, 0x07	; 7
  b6:	89 2b       	or	r24, r25
  b8:	87 b9       	out	0x07, r24	; 7
		setbit(ADC_CTRL_STATUS_ACCESS,6);/* adc start*/
  ba:	36 9a       	sbi	0x06, 6	; 6
	
		while(isbitclear(ADC_CTRL_STATUS_ACCESS,4))/*ADIF*/
  bc:	34 9b       	sbis	0x06, 4	; 6
  be:	fe cf       	rjmp	.-4      	; 0xbc <ADC_READ+0xe>
		{
			;
		}
		/* to clear flag 7ot 1*/
		setbit(ADC_CTRL_STATUS_ACCESS,4);
  c0:	34 9a       	sbi	0x06, 4	; 6
		
		
		switch(resolution)
  c2:	66 23       	and	r22, r22
  c4:	19 f0       	breq	.+6      	; 0xcc <ADC_READ+0x1e>
  c6:	61 30       	cpi	r22, 0x01	; 1
  c8:	21 f0       	breq	.+8      	; 0xd2 <ADC_READ+0x24>
  ca:	08 c0       	rjmp	.+16     	; 0xdc <ADC_READ+0x2e>
		{case _8_BIT:return ADC_8_BIT;
  cc:	85 b1       	in	r24, 0x05	; 5
  ce:	90 e0       	ldi	r25, 0x00	; 0
  d0:	08 95       	ret
				case _10_BIT:return ADC_10_BIT;
  d2:	84 b1       	in	r24, 0x04	; 4
  d4:	25 b1       	in	r18, 0x05	; 5
  d6:	90 e0       	ldi	r25, 0x00	; 0
  d8:	92 2b       	or	r25, r18
  da:	08 95       	ret
		}
	return -1;
  dc:	8f ef       	ldi	r24, 0xFF	; 255
  de:	9f ef       	ldi	r25, 0xFF	; 255
	}
  e0:	08 95       	ret

000000e2 <gpio_inputconfg>:
 * Created: 04/09/2018 01:28:50 Ù…
 *  Author: ideapad510
 */ 
#include "microconfigrations.h"
	void gpio_inputconfg(volatile uint8 * DiR_address,volatile uint8 * inputmodreg_address,INPUT_MOD mod,uint8 pin)
	{
  e2:	fb 01       	movw	r30, r22
		clearbit(*DiR_address,pin);
  e4:	dc 01       	movw	r26, r24
  e6:	3c 91       	ld	r19, X
  e8:	61 e0       	ldi	r22, 0x01	; 1
  ea:	70 e0       	ldi	r23, 0x00	; 0
  ec:	02 2e       	mov	r0, r18
  ee:	02 c0       	rjmp	.+4      	; 0xf4 <gpio_inputconfg+0x12>
  f0:	66 0f       	add	r22, r22
  f2:	77 1f       	adc	r23, r23
  f4:	0a 94       	dec	r0
  f6:	e2 f7       	brpl	.-8      	; 0xf0 <gpio_inputconfg+0xe>
  f8:	60 95       	com	r22
  fa:	36 23       	and	r19, r22
  fc:	3c 93       	st	X, r19
		clearbit(*inputmodreg_address,pin);
  fe:	80 81       	ld	r24, Z
 100:	68 23       	and	r22, r24
 102:	60 83       	st	Z, r22
				*inputmodreg_address|=mod<<pin;
 104:	80 81       	ld	r24, Z
 106:	50 e0       	ldi	r21, 0x00	; 0
 108:	ba 01       	movw	r22, r20
 10a:	02 c0       	rjmp	.+4      	; 0x110 <gpio_inputconfg+0x2e>
 10c:	66 0f       	add	r22, r22
 10e:	77 1f       	adc	r23, r23
 110:	2a 95       	dec	r18
 112:	e2 f7       	brpl	.-8      	; 0x10c <gpio_inputconfg+0x2a>
 114:	9b 01       	movw	r18, r22
 116:	28 2b       	or	r18, r24
 118:	20 83       	st	Z, r18
 11a:	08 95       	ret

0000011c <gpio_outputconfg>:
	
	
	
	
	void gpio_outputconfg(volatile uint8 * DiR_address,volatile uint8 * outputmodreg_address,OUTPUTMOD mod,uint8 pin)
	{
 11c:	fb 01       	movw	r30, r22
		
		setbit(*DiR_address,pin);
 11e:	dc 01       	movw	r26, r24
 120:	3c 91       	ld	r19, X
 122:	61 e0       	ldi	r22, 0x01	; 1
 124:	70 e0       	ldi	r23, 0x00	; 0
 126:	02 2e       	mov	r0, r18
 128:	02 c0       	rjmp	.+4      	; 0x12e <gpio_outputconfg+0x12>
 12a:	66 0f       	add	r22, r22
 12c:	77 1f       	adc	r23, r23
 12e:	0a 94       	dec	r0
 130:	e2 f7       	brpl	.-8      	; 0x12a <gpio_outputconfg+0xe>
 132:	36 2b       	or	r19, r22
 134:	3c 93       	st	X, r19
		clearbit(*outputmodreg_address,pin);
 136:	80 81       	ld	r24, Z
 138:	60 95       	com	r22
 13a:	68 23       	and	r22, r24
 13c:	60 83       	st	Z, r22
		*outputmodreg_address|=mod<<pin;
 13e:	80 81       	ld	r24, Z
 140:	50 e0       	ldi	r21, 0x00	; 0
 142:	ba 01       	movw	r22, r20
 144:	02 c0       	rjmp	.+4      	; 0x14a <gpio_outputconfg+0x2e>
 146:	66 0f       	add	r22, r22
 148:	77 1f       	adc	r23, r23
 14a:	2a 95       	dec	r18
 14c:	e2 f7       	brpl	.-8      	; 0x146 <gpio_outputconfg+0x2a>
 14e:	9b 01       	movw	r18, r22
 150:	28 2b       	or	r18, r24
 152:	20 83       	st	Z, r18
 154:	08 95       	ret

00000156 <inttostring>:
 * Created: 9/1/2020 12:42:54 PM
 *  Author: ideapad510
 */ 
#include "minohelper.h"
unsigned char inttostring(unsigned char * the_return,long thenumber)
{
 156:	3f 92       	push	r3
 158:	4f 92       	push	r4
 15a:	5f 92       	push	r5
 15c:	6f 92       	push	r6
 15e:	7f 92       	push	r7
 160:	8f 92       	push	r8
 162:	9f 92       	push	r9
 164:	af 92       	push	r10
 166:	bf 92       	push	r11
 168:	cf 92       	push	r12
 16a:	df 92       	push	r13
 16c:	ef 92       	push	r14
 16e:	ff 92       	push	r15
 170:	0f 93       	push	r16
 172:	1f 93       	push	r17
 174:	cf 93       	push	r28
 176:	df 93       	push	r29
 178:	ec 01       	movw	r28, r24
	unsigned char counter=0;
	unsigned long the_scaler=1000000000;
	if (thenumber<0)
 17a:	77 23       	and	r23, r23
 17c:	64 f4       	brge	.+24     	; 0x196 <inttostring+0x40>
	{
		the_return[0]='-';
 17e:	8d e2       	ldi	r24, 0x2D	; 45
 180:	88 83       	st	Y, r24
		thenumber=thenumber*(-1);
 182:	70 95       	com	r23
 184:	60 95       	com	r22
 186:	50 95       	com	r21
 188:	41 95       	neg	r20
 18a:	5f 4f       	sbci	r21, 0xFF	; 255
 18c:	6f 4f       	sbci	r22, 0xFF	; 255
 18e:	7f 4f       	sbci	r23, 0xFF	; 255
		counter=1;
 190:	33 24       	eor	r3, r3
 192:	33 94       	inc	r3
 194:	01 c0       	rjmp	.+2      	; 0x198 <inttostring+0x42>
 *  Author: ideapad510
 */ 
#include "minohelper.h"
unsigned char inttostring(unsigned char * the_return,long thenumber)
{
	unsigned char counter=0;
 196:	31 2c       	mov	r3, r1
	{
		the_return[0]='-';
		thenumber=thenumber*(-1);
		counter=1;
	}
	if (thenumber==0)
 198:	41 15       	cp	r20, r1
 19a:	51 05       	cpc	r21, r1
 19c:	61 05       	cpc	r22, r1
 19e:	71 05       	cpc	r23, r1
 1a0:	59 f0       	breq	.+22     	; 0x1b8 <inttostring+0x62>
	{
		the_return[0]='0';
		return 1;
	}
	while (thenumber/the_scaler==0)
 1a2:	4a 01       	movw	r8, r20
 1a4:	5b 01       	movw	r10, r22
 1a6:	41 15       	cp	r20, r1
 1a8:	8a ec       	ldi	r24, 0xCA	; 202
 1aa:	58 07       	cpc	r21, r24
 1ac:	8a e9       	ldi	r24, 0x9A	; 154
 1ae:	68 07       	cpc	r22, r24
 1b0:	8b e3       	ldi	r24, 0x3B	; 59
 1b2:	78 07       	cpc	r23, r24
 1b4:	28 f0       	brcs	.+10     	; 0x1c0 <inttostring+0x6a>
 1b6:	61 c0       	rjmp	.+194    	; 0x27a <inttostring+0x124>
		thenumber=thenumber*(-1);
		counter=1;
	}
	if (thenumber==0)
	{
		the_return[0]='0';
 1b8:	80 e3       	ldi	r24, 0x30	; 48
 1ba:	88 83       	st	Y, r24
		return 1;
 1bc:	81 e0       	ldi	r24, 0x01	; 1
 1be:	81 c0       	rjmp	.+258    	; 0x2c2 <inttostring+0x16c>
	}
	while (thenumber/the_scaler==0)
 1c0:	0f 2e       	mov	r0, r31
 1c2:	c1 2c       	mov	r12, r1
 1c4:	fa ec       	ldi	r31, 0xCA	; 202
 1c6:	df 2e       	mov	r13, r31
 1c8:	fa e9       	ldi	r31, 0x9A	; 154
 1ca:	ef 2e       	mov	r14, r31
 1cc:	fb e3       	ldi	r31, 0x3B	; 59
 1ce:	ff 2e       	mov	r15, r31
 1d0:	f0 2d       	mov	r31, r0
	{
		the_scaler=the_scaler/10;
 1d2:	0f 2e       	mov	r0, r31
 1d4:	fa e0       	ldi	r31, 0x0A	; 10
 1d6:	4f 2e       	mov	r4, r31
 1d8:	51 2c       	mov	r5, r1
 1da:	61 2c       	mov	r6, r1
 1dc:	71 2c       	mov	r7, r1
 1de:	f0 2d       	mov	r31, r0
 1e0:	c7 01       	movw	r24, r14
 1e2:	b6 01       	movw	r22, r12
 1e4:	a3 01       	movw	r20, r6
 1e6:	92 01       	movw	r18, r4
 1e8:	0e 94 20 04 	call	0x840	; 0x840 <__udivmodsi4>
 1ec:	69 01       	movw	r12, r18
 1ee:	7a 01       	movw	r14, r20
	if (thenumber==0)
	{
		the_return[0]='0';
		return 1;
	}
	while (thenumber/the_scaler==0)
 1f0:	c5 01       	movw	r24, r10
 1f2:	b4 01       	movw	r22, r8
 1f4:	0e 94 20 04 	call	0x840	; 0x840 <__udivmodsi4>
 1f8:	23 2b       	or	r18, r19
 1fa:	24 2b       	or	r18, r20
 1fc:	25 2b       	or	r18, r21
 1fe:	81 f3       	breq	.-32     	; 0x1e0 <inttostring+0x8a>
		the_scaler=the_scaler/10;
	}
	
	do 
	{
			the_return[counter]=(thenumber/the_scaler)+48;
 200:	8e 01       	movw	r16, r28
 202:	03 0d       	add	r16, r3
 204:	11 1d       	adc	r17, r1
 206:	c5 01       	movw	r24, r10
 208:	b4 01       	movw	r22, r8
 20a:	a7 01       	movw	r20, r14
 20c:	96 01       	movw	r18, r12
 20e:	0e 94 20 04 	call	0x840	; 0x840 <__udivmodsi4>
 212:	20 5d       	subi	r18, 0xD0	; 208
 214:	f8 01       	movw	r30, r16
 216:	20 83       	st	Z, r18
			counter++;
 218:	33 94       	inc	r3
			thenumber=thenumber%the_scaler;
 21a:	76 2e       	mov	r7, r22
 21c:	67 2e       	mov	r6, r23
 21e:	58 2e       	mov	r5, r24
 220:	49 2e       	mov	r4, r25
			if (the_scaler==1)
 222:	f1 e0       	ldi	r31, 0x01	; 1
 224:	cf 16       	cp	r12, r31
 226:	d1 04       	cpc	r13, r1
 228:	e1 04       	cpc	r14, r1
 22a:	f1 04       	cpc	r15, r1
 22c:	09 f0       	breq	.+2      	; 0x230 <inttostring+0xda>
 22e:	41 c0       	rjmp	.+130    	; 0x2b2 <inttostring+0x15c>
 230:	20 c0       	rjmp	.+64     	; 0x272 <inttostring+0x11c>
			{
				break;
			}
			the_scaler=the_scaler/10;
 232:	c7 01       	movw	r24, r14
 234:	b6 01       	movw	r22, r12
 236:	a5 01       	movw	r20, r10
 238:	94 01       	movw	r18, r8
 23a:	0e 94 20 04 	call	0x840	; 0x840 <__udivmodsi4>
 23e:	69 01       	movw	r12, r18
 240:	7a 01       	movw	r14, r20
		the_scaler=the_scaler/10;
	}
	
	do 
	{
			the_return[counter]=(thenumber/the_scaler)+48;
 242:	8e 01       	movw	r16, r28
 244:	03 0d       	add	r16, r3
 246:	11 1d       	adc	r17, r1
 248:	67 2d       	mov	r22, r7
 24a:	76 2d       	mov	r23, r6
 24c:	85 2d       	mov	r24, r5
 24e:	94 2d       	mov	r25, r4
 250:	0e 94 20 04 	call	0x840	; 0x840 <__udivmodsi4>
 254:	20 5d       	subi	r18, 0xD0	; 208
 256:	f8 01       	movw	r30, r16
 258:	20 83       	st	Z, r18
			counter++;
 25a:	33 94       	inc	r3
			thenumber=thenumber%the_scaler;
 25c:	76 2e       	mov	r7, r22
 25e:	67 2e       	mov	r6, r23
 260:	58 2e       	mov	r5, r24
 262:	49 2e       	mov	r4, r25
			if (the_scaler==1)
 264:	f1 e0       	ldi	r31, 0x01	; 1
 266:	cf 16       	cp	r12, r31
 268:	d1 04       	cpc	r13, r1
 26a:	e1 04       	cpc	r14, r1
 26c:	f1 04       	cpc	r15, r1
 26e:	09 f7       	brne	.-62     	; 0x232 <inttostring+0xdc>
 270:	02 c0       	rjmp	.+4      	; 0x276 <inttostring+0x120>
	}
	
	do 
	{
			the_return[counter]=(thenumber/the_scaler)+48;
			counter++;
 272:	83 2d       	mov	r24, r3
 274:	26 c0       	rjmp	.+76     	; 0x2c2 <inttostring+0x16c>
 276:	83 2d       	mov	r24, r3
 278:	24 c0       	rjmp	.+72     	; 0x2c2 <inttostring+0x16c>
		the_scaler=the_scaler/10;
	}
	
	do 
	{
			the_return[counter]=(thenumber/the_scaler)+48;
 27a:	8e 01       	movw	r16, r28
 27c:	03 0d       	add	r16, r3
 27e:	11 1d       	adc	r17, r1
 280:	cb 01       	movw	r24, r22
 282:	ba 01       	movw	r22, r20
 284:	20 e0       	ldi	r18, 0x00	; 0
 286:	3a ec       	ldi	r19, 0xCA	; 202
 288:	4a e9       	ldi	r20, 0x9A	; 154
 28a:	5b e3       	ldi	r21, 0x3B	; 59
 28c:	0e 94 20 04 	call	0x840	; 0x840 <__udivmodsi4>
 290:	20 5d       	subi	r18, 0xD0	; 208
 292:	f8 01       	movw	r30, r16
 294:	20 83       	st	Z, r18
			counter++;
 296:	33 94       	inc	r3
			thenumber=thenumber%the_scaler;
 298:	76 2e       	mov	r7, r22
 29a:	67 2e       	mov	r6, r23
 29c:	58 2e       	mov	r5, r24
 29e:	49 2e       	mov	r4, r25
 2a0:	0f 2e       	mov	r0, r31
 2a2:	c1 2c       	mov	r12, r1
 2a4:	fa ec       	ldi	r31, 0xCA	; 202
 2a6:	df 2e       	mov	r13, r31
 2a8:	fa e9       	ldi	r31, 0x9A	; 154
 2aa:	ef 2e       	mov	r14, r31
 2ac:	fb e3       	ldi	r31, 0x3B	; 59
 2ae:	ff 2e       	mov	r15, r31
 2b0:	f0 2d       	mov	r31, r0
			if (the_scaler==1)
			{
				break;
			}
			the_scaler=the_scaler/10;
 2b2:	0f 2e       	mov	r0, r31
 2b4:	fa e0       	ldi	r31, 0x0A	; 10
 2b6:	8f 2e       	mov	r8, r31
 2b8:	91 2c       	mov	r9, r1
 2ba:	a1 2c       	mov	r10, r1
 2bc:	b1 2c       	mov	r11, r1
 2be:	f0 2d       	mov	r31, r0
 2c0:	b8 cf       	rjmp	.-144    	; 0x232 <inttostring+0xdc>
	
	
	
	
	return counter;
}
 2c2:	df 91       	pop	r29
 2c4:	cf 91       	pop	r28
 2c6:	1f 91       	pop	r17
 2c8:	0f 91       	pop	r16
 2ca:	ff 90       	pop	r15
 2cc:	ef 90       	pop	r14
 2ce:	df 90       	pop	r13
 2d0:	cf 90       	pop	r12
 2d2:	bf 90       	pop	r11
 2d4:	af 90       	pop	r10
 2d6:	9f 90       	pop	r9
 2d8:	8f 90       	pop	r8
 2da:	7f 90       	pop	r7
 2dc:	6f 90       	pop	r6
 2de:	5f 90       	pop	r5
 2e0:	4f 90       	pop	r4
 2e2:	3f 90       	pop	r3
 2e4:	08 95       	ret

000002e6 <main>:
#include "uart.h"
#include "minohelper.h"
#include <avr/io.h>

int main(void)
{
 2e6:	cf 93       	push	r28
 2e8:	df 93       	push	r29
 2ea:	cd b7       	in	r28, 0x3d	; 61
 2ec:	de b7       	in	r29, 0x3e	; 62
 2ee:	29 97       	sbiw	r28, 0x09	; 9
 2f0:	0f b6       	in	r0, 0x3f	; 63
 2f2:	f8 94       	cli
 2f4:	de bf       	out	0x3e, r29	; 62
 2f6:	0f be       	out	0x3f, r0	; 63
 2f8:	cd bf       	out	0x3d, r28	; 61
	ADC_INIT (ADC_DIVISION_16,ADC_AVCC,SINGLE_MODE , ADC_INTERRUPT_DISABLE,left );
 2fa:	00 e2       	ldi	r16, 0x20	; 32
 2fc:	20 e0       	ldi	r18, 0x00	; 0
 2fe:	40 e0       	ldi	r20, 0x00	; 0
 300:	50 e0       	ldi	r21, 0x00	; 0
 302:	60 e4       	ldi	r22, 0x40	; 64
 304:	84 e0       	ldi	r24, 0x04	; 4
 306:	0e 94 41 00 	call	0x82	; 0x82 <ADC_INIT>
		USART_INIT(ASYNCHRONOUS_NORMAL,INT_disable,TX_RX_ENABLE,PARITY_DISABLE_1STOP,DATA_8,USART_BAUD_9600);
 30a:	0f 2e       	mov	r0, r31
 30c:	f0 e8       	ldi	r31, 0x80	; 128
 30e:	cf 2e       	mov	r12, r31
 310:	f5 e2       	ldi	r31, 0x25	; 37
 312:	df 2e       	mov	r13, r31
 314:	e1 2c       	mov	r14, r1
 316:	f1 2c       	mov	r15, r1
 318:	f0 2d       	mov	r31, r0
 31a:	06 e0       	ldi	r16, 0x06	; 6
 31c:	10 e0       	ldi	r17, 0x00	; 0
 31e:	20 e0       	ldi	r18, 0x00	; 0
 320:	48 e1       	ldi	r20, 0x18	; 24
 322:	60 e0       	ldi	r22, 0x00	; 0
 324:	80 e0       	ldi	r24, 0x00	; 0
 326:	90 e0       	ldi	r25, 0x00	; 0
 328:	0e 94 bb 01 	call	0x376	; 0x376 <USART_INIT>
gpio_outputconfg(PORTB_DDRA_ADDRESS,PORTB_OUTMOD_ADDRESS,OUTPASS,0);
*/
/*
gpio_outputconfg(PORTA_DDRA_ADDRESS,PORTA_OUTMOD_ADDRESS,OUTPASS,0);
setbit(*PORTA_OUT_ADDRESS,0);*/
volatile unsigned char x=0,y;
 32c:	19 82       	std	Y+1, r1	; 0x01
	USART_SEND_str("started");
 32e:	80 e6       	ldi	r24, 0x60	; 96
 330:	90 e0       	ldi	r25, 0x00	; 0
 332:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <USART_SEND_str>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 336:	2f ef       	ldi	r18, 0xFF	; 255
 338:	80 e7       	ldi	r24, 0x70	; 112
 33a:	92 e0       	ldi	r25, 0x02	; 2
 33c:	21 50       	subi	r18, 0x01	; 1
 33e:	80 40       	sbci	r24, 0x00	; 0
 340:	90 40       	sbci	r25, 0x00	; 0
 342:	e1 f7       	brne	.-8      	; 0x33c <main+0x56>
 344:	00 c0       	rjmp	.+0      	; 0x346 <main+0x60>
 346:	00 00       	nop

    while(1)
    {
		_delay_ms(50);
	x=ADC_READ(ADC1,_8_BIT);
 348:	60 e0       	ldi	r22, 0x00	; 0
 34a:	81 e0       	ldi	r24, 0x01	; 1
 34c:	0e 94 57 00 	call	0xae	; 0xae <ADC_READ>
 350:	89 83       	std	Y+1, r24	; 0x01
	else
	{
		x=y-x;
	}*/
           unsigned char  the_return[8];
           USART_SEND_ARRAY(the_return,inttostring(the_return,x));
 352:	49 81       	ldd	r20, Y+1	; 0x01
 354:	50 e0       	ldi	r21, 0x00	; 0
 356:	60 e0       	ldi	r22, 0x00	; 0
 358:	70 e0       	ldi	r23, 0x00	; 0
 35a:	ce 01       	movw	r24, r28
 35c:	02 96       	adiw	r24, 0x02	; 2
 35e:	0e 94 ab 00 	call	0x156	; 0x156 <inttostring>
 362:	68 2f       	mov	r22, r24
 364:	ce 01       	movw	r24, r28
 366:	02 96       	adiw	r24, 0x02	; 2
 368:	0e 94 66 02 	call	0x4cc	; 0x4cc <USART_SEND_ARRAY>
           USART_SEND_str("\n");
 36c:	88 e6       	ldi	r24, 0x68	; 104
 36e:	90 e0       	ldi	r25, 0x00	; 0
 370:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <USART_SEND_str>
 374:	e0 cf       	rjmp	.-64     	; 0x336 <main+0x50>

00000376 <USART_INIT>:
 *  Author: ideapad510
 */ 
#include "uart.h"

	void USART_INIT(usart_mode mode_of_sync,usart_int intrupts,USART_ENABLE usarttype_TX_RX,USART_CONTORL_FRAME controlframe,USART_DATA_FRAME dataframe,USART_BAUDE_RATES buade_rate)
	{  
 376:	9f 92       	push	r9
 378:	af 92       	push	r10
 37a:	bf 92       	push	r11
 37c:	cf 92       	push	r12
 37e:	df 92       	push	r13
 380:	ef 92       	push	r14
 382:	ff 92       	push	r15
 384:	0f 93       	push	r16
 386:	1f 93       	push	r17
 388:	cf 93       	push	r28
 38a:	df 93       	push	r29
 38c:	ec 01       	movw	r28, r24
 38e:	b6 2e       	mov	r11, r22
 390:	a4 2e       	mov	r10, r20
 392:	92 2e       	mov	r9, r18
		uint16 ubrr_=0;
		 gpio_outputconfg(PORTD_DDRA_ADDRESS,PORTD_OUTMOD_ADDRESS,OUTPASS,1);
 394:	21 e0       	ldi	r18, 0x01	; 1
 396:	40 e0       	ldi	r20, 0x00	; 0
 398:	60 e3       	ldi	r22, 0x30	; 48
 39a:	70 e0       	ldi	r23, 0x00	; 0
 39c:	81 e3       	ldi	r24, 0x31	; 49
 39e:	90 e0       	ldi	r25, 0x00	; 0
 3a0:	0e 94 8e 00 	call	0x11c	; 0x11c <gpio_outputconfg>
		  gpio_inputconfg(PORTD_DDRA_ADDRESS,PORTD_INMOD_ADDRESS,FLOAT_mod,0);
 3a4:	20 e0       	ldi	r18, 0x00	; 0
 3a6:	40 e0       	ldi	r20, 0x00	; 0
 3a8:	62 e3       	ldi	r22, 0x32	; 50
 3aa:	70 e0       	ldi	r23, 0x00	; 0
 3ac:	81 e3       	ldi	r24, 0x31	; 49
 3ae:	90 e0       	ldi	r25, 0x00	; 0
 3b0:	0e 94 71 00 	call	0xe2	; 0xe2 <gpio_inputconfg>




	  
		UCSRC_Access=0x80|mode_of_sync|controlframe|dataframe;
 3b4:	89 2d       	mov	r24, r9
 3b6:	80 2b       	or	r24, r16
 3b8:	80 68       	ori	r24, 0x80	; 128
 3ba:	9c 2e       	mov	r9, r28
 3bc:	98 2a       	or	r9, r24
 3be:	90 bc       	out	0x20, r9	; 32
	  UCSRB_Access |= intrupts|usarttype_TX_RX;
 3c0:	8a b1       	in	r24, 0x0a	; 10
 3c2:	a8 2a       	or	r10, r24
 3c4:	ba 28       	or	r11, r10
 3c6:	ba b8       	out	0x0a, r11	; 10
	   UCSRB_Access|=dataframe>>8;
 3c8:	8a b1       	in	r24, 0x0a	; 10
 3ca:	18 2b       	or	r17, r24
 3cc:	1a b9       	out	0x0a, r17	; 10
	
	  
	  
	  UCSRA_Access|=(mode_of_sync>>8)|mult_mcus_comm_mode;
 3ce:	8b b1       	in	r24, 0x0b	; 11
 3d0:	8d 2b       	or	r24, r29
 3d2:	8b b9       	out	0x0b, r24	; 11
		if ((mode_of_sync==SYNC_sample_FALLING) ||(mode_of_sync==SYNC_sample_RISING))
 3d4:	ce 01       	movw	r24, r28
 3d6:	80 54       	subi	r24, 0x40	; 64
 3d8:	91 09       	sbc	r25, r1
 3da:	02 97       	sbiw	r24, 0x02	; 2
 3dc:	40 f4       	brcc	.+16     	; 0x3ee <USART_INIT+0x78>
		{
	     #if _MASTER_ ==1  
		 gpio_outputconfg(PORTB_DDRA_ADDRESS,PORTB_OUTMOD_ADDRESS,OUTPASS,0);
 3de:	20 e0       	ldi	r18, 0x00	; 0
 3e0:	40 e0       	ldi	r20, 0x00	; 0
 3e2:	66 e3       	ldi	r22, 0x36	; 54
 3e4:	70 e0       	ldi	r23, 0x00	; 0
 3e6:	87 e3       	ldi	r24, 0x37	; 55
 3e8:	90 e0       	ldi	r25, 0x00	; 0
 3ea:	0e 94 8e 00 	call	0x11c	; 0x11c <gpio_outputconfg>
		 gpio_inputconfg(PORTB_DDRA_ADDRESS,PORTB_INMOD_ADDRESS,FLOAT_mod,0);
         #endif
		 ;
		}
	
		  switch (mode_of_sync)
 3ee:	c2 34       	cpi	r28, 0x42	; 66
 3f0:	d1 05       	cpc	r29, r1
 3f2:	30 f4       	brcc	.+12     	; 0x400 <USART_INIT+0x8a>
 3f4:	c0 34       	cpi	r28, 0x40	; 64
 3f6:	d1 05       	cpc	r29, r1
 3f8:	c8 f5       	brcc	.+114    	; 0x46c <USART_INIT+0xf6>
 3fa:	cd 2b       	or	r28, r29
 3fc:	29 f0       	breq	.+10     	; 0x408 <USART_INIT+0x92>
 3fe:	50 c0       	rjmp	.+160    	; 0x4a0 <USART_INIT+0x12a>
 400:	c1 15       	cp	r28, r1
 402:	d2 40       	sbci	r29, 0x02	; 2
 404:	e1 f0       	breq	.+56     	; 0x43e <USART_INIT+0xc8>
 406:	4c c0       	rjmp	.+152    	; 0x4a0 <USART_INIT+0x12a>
		{case ASYNCHRONOUS_NORMAL:ubrr_= (F_CPU/(16UL*buade_rate)-1);
 408:	cc 0c       	add	r12, r12
 40a:	dd 1c       	adc	r13, r13
 40c:	ee 1c       	adc	r14, r14
 40e:	ff 1c       	adc	r15, r15
 410:	cc 0c       	add	r12, r12
 412:	dd 1c       	adc	r13, r13
 414:	ee 1c       	adc	r14, r14
 416:	ff 1c       	adc	r15, r15
 418:	a7 01       	movw	r20, r14
 41a:	96 01       	movw	r18, r12
 41c:	22 0f       	add	r18, r18
 41e:	33 1f       	adc	r19, r19
 420:	44 1f       	adc	r20, r20
 422:	55 1f       	adc	r21, r21
 424:	22 0f       	add	r18, r18
 426:	33 1f       	adc	r19, r19
 428:	44 1f       	adc	r20, r20
 42a:	55 1f       	adc	r21, r21
 42c:	60 e0       	ldi	r22, 0x00	; 0
 42e:	74 e2       	ldi	r23, 0x24	; 36
 430:	84 ef       	ldi	r24, 0xF4	; 244
 432:	90 e0       	ldi	r25, 0x00	; 0
 434:	0e 94 20 04 	call	0x840	; 0x840 <__udivmodsi4>
 438:	21 50       	subi	r18, 0x01	; 1
 43a:	31 09       	sbc	r19, r1
			                       break;
 43c:	33 c0       	rjmp	.+102    	; 0x4a4 <USART_INIT+0x12e>
			case ASYNCHRONOUS_DOUBLE:ubrr_= (F_CPU/(8UL*buade_rate)-1);
 43e:	cc 0c       	add	r12, r12
 440:	dd 1c       	adc	r13, r13
 442:	ee 1c       	adc	r14, r14
 444:	ff 1c       	adc	r15, r15
 446:	cc 0c       	add	r12, r12
 448:	dd 1c       	adc	r13, r13
 44a:	ee 1c       	adc	r14, r14
 44c:	ff 1c       	adc	r15, r15
 44e:	a7 01       	movw	r20, r14
 450:	96 01       	movw	r18, r12
 452:	22 0f       	add	r18, r18
 454:	33 1f       	adc	r19, r19
 456:	44 1f       	adc	r20, r20
 458:	55 1f       	adc	r21, r21
 45a:	60 e0       	ldi	r22, 0x00	; 0
 45c:	74 e2       	ldi	r23, 0x24	; 36
 45e:	84 ef       	ldi	r24, 0xF4	; 244
 460:	90 e0       	ldi	r25, 0x00	; 0
 462:	0e 94 20 04 	call	0x840	; 0x840 <__udivmodsi4>
 466:	21 50       	subi	r18, 0x01	; 1
 468:	31 09       	sbc	r19, r1
			                       break;
 46a:	1c c0       	rjmp	.+56     	; 0x4a4 <USART_INIT+0x12e>
			
			case SYNC_sample_RISING:
			case SYNC_sample_FALLING:
			                        ubrr_= (F_CPU/(2.0*buade_rate)-1);
 46c:	c7 01       	movw	r24, r14
 46e:	b6 01       	movw	r22, r12
 470:	0e 94 92 03 	call	0x724	; 0x724 <__floatunsisf>
 474:	9b 01       	movw	r18, r22
 476:	ac 01       	movw	r20, r24
 478:	0e 94 9a 02 	call	0x534	; 0x534 <__addsf3>
 47c:	9b 01       	movw	r18, r22
 47e:	ac 01       	movw	r20, r24
 480:	60 e0       	ldi	r22, 0x00	; 0
 482:	74 e2       	ldi	r23, 0x24	; 36
 484:	84 e7       	ldi	r24, 0x74	; 116
 486:	9b e4       	ldi	r25, 0x4B	; 75
 488:	0e 94 fe 02 	call	0x5fc	; 0x5fc <__divsf3>
 48c:	20 e0       	ldi	r18, 0x00	; 0
 48e:	30 e0       	ldi	r19, 0x00	; 0
 490:	40 e8       	ldi	r20, 0x80	; 128
 492:	5f e3       	ldi	r21, 0x3F	; 63
 494:	0e 94 99 02 	call	0x532	; 0x532 <__subsf3>
 498:	0e 94 66 03 	call	0x6cc	; 0x6cc <__fixunssfsi>
 49c:	9b 01       	movw	r18, r22
			                        break;
 49e:	02 c0       	rjmp	.+4      	; 0x4a4 <USART_INIT+0x12e>
 */ 
#include "uart.h"

	void USART_INIT(usart_mode mode_of_sync,usart_int intrupts,USART_ENABLE usarttype_TX_RX,USART_CONTORL_FRAME controlframe,USART_DATA_FRAME dataframe,USART_BAUDE_RATES buade_rate)
	{  
		uint16 ubrr_=0;
 4a0:	20 e0       	ldi	r18, 0x00	; 0
 4a2:	30 e0       	ldi	r19, 0x00	; 0
									
		}
		
		
		
		 UBRRL_Access=0xff & ubrr_;
 4a4:	29 b9       	out	0x09, r18	; 9
		  UBRRH_Access=0x0f & (ubrr_>>8);
 4a6:	83 2f       	mov	r24, r19
 4a8:	8f 70       	andi	r24, 0x0F	; 15
 4aa:	80 bd       	out	0x20, r24	; 32
		 
		 
	}
 4ac:	df 91       	pop	r29
 4ae:	cf 91       	pop	r28
 4b0:	1f 91       	pop	r17
 4b2:	0f 91       	pop	r16
 4b4:	ff 90       	pop	r15
 4b6:	ef 90       	pop	r14
 4b8:	df 90       	pop	r13
 4ba:	cf 90       	pop	r12
 4bc:	bf 90       	pop	r11
 4be:	af 90       	pop	r10
 4c0:	9f 90       	pop	r9
 4c2:	08 95       	ret

000004c4 <USART_SEND_BYTE>:
	void USART_SEND_BYTE(uint8 data)
	{
		
		
		UDR_Access=data;
 4c4:	8c b9       	out	0x0c, r24	; 12
		
		while(isbitclear(UCSRA_Access,UDRE_))
 4c6:	5d 9b       	sbis	0x0b, 5	; 11
 4c8:	fe cf       	rjmp	.-4      	; 0x4c6 <USART_SEND_BYTE+0x2>
		{}
		
		
	}
 4ca:	08 95       	ret

000004cc <USART_SEND_ARRAY>:
			{}
		return UDR_Access;
		
	}
	void USART_SEND_ARRAY(uint8* ptr,uint8 size)
	{uint8 i=0;
 4cc:	0f 93       	push	r16
 4ce:	1f 93       	push	r17
 4d0:	cf 93       	push	r28
 4d2:	df 93       	push	r29
 4d4:	06 2f       	mov	r16, r22
		for(i=0;i<size;i++)
 4d6:	66 23       	and	r22, r22
 4d8:	49 f0       	breq	.+18     	; 0x4ec <USART_SEND_ARRAY+0x20>
 4da:	c8 2f       	mov	r28, r24
 4dc:	d9 2f       	mov	r29, r25
 4de:	10 e0       	ldi	r17, 0x00	; 0
		{
			USART_SEND_BYTE(ptr[i]);	
 4e0:	89 91       	ld	r24, Y+
 4e2:	0e 94 62 02 	call	0x4c4	; 0x4c4 <USART_SEND_BYTE>
		return UDR_Access;
		
	}
	void USART_SEND_ARRAY(uint8* ptr,uint8 size)
	{uint8 i=0;
		for(i=0;i<size;i++)
 4e6:	1f 5f       	subi	r17, 0xFF	; 255
 4e8:	10 13       	cpse	r17, r16
 4ea:	fa cf       	rjmp	.-12     	; 0x4e0 <USART_SEND_ARRAY+0x14>
		{
			USART_SEND_BYTE(ptr[i]);	
		}
		
	}
 4ec:	df 91       	pop	r29
 4ee:	cf 91       	pop	r28
 4f0:	1f 91       	pop	r17
 4f2:	0f 91       	pop	r16
 4f4:	08 95       	ret

000004f6 <USART_SEND_str>:
	void USART_SEND_str(uint8* ptr)
	{  uint8 i=0;
 4f6:	1f 93       	push	r17
 4f8:	cf 93       	push	r28
 4fa:	df 93       	push	r29
 4fc:	ec 01       	movw	r28, r24
		while(ptr[i]!='\0')
 4fe:	88 81       	ld	r24, Y
 500:	88 23       	and	r24, r24
 502:	81 f0       	breq	.+32     	; 0x524 <USART_SEND_str+0x2e>
			USART_SEND_BYTE(ptr[i]);	
		}
		
	}
	void USART_SEND_str(uint8* ptr)
	{  uint8 i=0;
 504:	10 e0       	ldi	r17, 0x00	; 0
		while(ptr[i]!='\0')
		{
			USART_SEND_BYTE(ptr[i]);
 506:	0e 94 62 02 	call	0x4c4	; 0x4c4 <USART_SEND_BYTE>
 50a:	8f e9       	ldi	r24, 0x9F	; 159
 50c:	9f e0       	ldi	r25, 0x0F	; 15
 50e:	01 97       	sbiw	r24, 0x01	; 1
 510:	f1 f7       	brne	.-4      	; 0x50e <USART_SEND_str+0x18>
 512:	00 c0       	rjmp	.+0      	; 0x514 <USART_SEND_str+0x1e>
 514:	00 00       	nop
			_delay_ms(1);
			++i;
 516:	1f 5f       	subi	r17, 0xFF	; 255
		}
		
	}
	void USART_SEND_str(uint8* ptr)
	{  uint8 i=0;
		while(ptr[i]!='\0')
 518:	fe 01       	movw	r30, r28
 51a:	e1 0f       	add	r30, r17
 51c:	f1 1d       	adc	r31, r1
 51e:	80 81       	ld	r24, Z
 520:	81 11       	cpse	r24, r1
 522:	f1 cf       	rjmp	.-30     	; 0x506 <USART_SEND_str+0x10>
		{
			USART_SEND_BYTE(ptr[i]);
			_delay_ms(1);
			++i;
		}
		USART_SEND_BYTE('\0');
 524:	80 e0       	ldi	r24, 0x00	; 0
 526:	0e 94 62 02 	call	0x4c4	; 0x4c4 <USART_SEND_BYTE>
		}
 52a:	df 91       	pop	r29
 52c:	cf 91       	pop	r28
 52e:	1f 91       	pop	r17
 530:	08 95       	ret

00000532 <__subsf3>:
 532:	50 58       	subi	r21, 0x80	; 128

00000534 <__addsf3>:
 534:	bb 27       	eor	r27, r27
 536:	aa 27       	eor	r26, r26
 538:	0e d0       	rcall	.+28     	; 0x556 <__addsf3x>
 53a:	48 c1       	rjmp	.+656    	; 0x7cc <__fp_round>
 53c:	39 d1       	rcall	.+626    	; 0x7b0 <__fp_pscA>
 53e:	30 f0       	brcs	.+12     	; 0x54c <__addsf3+0x18>
 540:	3e d1       	rcall	.+636    	; 0x7be <__fp_pscB>
 542:	20 f0       	brcs	.+8      	; 0x54c <__addsf3+0x18>
 544:	31 f4       	brne	.+12     	; 0x552 <__addsf3+0x1e>
 546:	9f 3f       	cpi	r25, 0xFF	; 255
 548:	11 f4       	brne	.+4      	; 0x54e <__addsf3+0x1a>
 54a:	1e f4       	brtc	.+6      	; 0x552 <__addsf3+0x1e>
 54c:	2e c1       	rjmp	.+604    	; 0x7aa <__fp_nan>
 54e:	0e f4       	brtc	.+2      	; 0x552 <__addsf3+0x1e>
 550:	e0 95       	com	r30
 552:	e7 fb       	bst	r30, 7
 554:	24 c1       	rjmp	.+584    	; 0x79e <__fp_inf>

00000556 <__addsf3x>:
 556:	e9 2f       	mov	r30, r25
 558:	4a d1       	rcall	.+660    	; 0x7ee <__fp_split3>
 55a:	80 f3       	brcs	.-32     	; 0x53c <__addsf3+0x8>
 55c:	ba 17       	cp	r27, r26
 55e:	62 07       	cpc	r22, r18
 560:	73 07       	cpc	r23, r19
 562:	84 07       	cpc	r24, r20
 564:	95 07       	cpc	r25, r21
 566:	18 f0       	brcs	.+6      	; 0x56e <__addsf3x+0x18>
 568:	71 f4       	brne	.+28     	; 0x586 <__addsf3x+0x30>
 56a:	9e f5       	brtc	.+102    	; 0x5d2 <__addsf3x+0x7c>
 56c:	62 c1       	rjmp	.+708    	; 0x832 <__fp_zero>
 56e:	0e f4       	brtc	.+2      	; 0x572 <__addsf3x+0x1c>
 570:	e0 95       	com	r30
 572:	0b 2e       	mov	r0, r27
 574:	ba 2f       	mov	r27, r26
 576:	a0 2d       	mov	r26, r0
 578:	0b 01       	movw	r0, r22
 57a:	b9 01       	movw	r22, r18
 57c:	90 01       	movw	r18, r0
 57e:	0c 01       	movw	r0, r24
 580:	ca 01       	movw	r24, r20
 582:	a0 01       	movw	r20, r0
 584:	11 24       	eor	r1, r1
 586:	ff 27       	eor	r31, r31
 588:	59 1b       	sub	r21, r25
 58a:	99 f0       	breq	.+38     	; 0x5b2 <__addsf3x+0x5c>
 58c:	59 3f       	cpi	r21, 0xF9	; 249
 58e:	50 f4       	brcc	.+20     	; 0x5a4 <__addsf3x+0x4e>
 590:	50 3e       	cpi	r21, 0xE0	; 224
 592:	68 f1       	brcs	.+90     	; 0x5ee <__addsf3x+0x98>
 594:	1a 16       	cp	r1, r26
 596:	f0 40       	sbci	r31, 0x00	; 0
 598:	a2 2f       	mov	r26, r18
 59a:	23 2f       	mov	r18, r19
 59c:	34 2f       	mov	r19, r20
 59e:	44 27       	eor	r20, r20
 5a0:	58 5f       	subi	r21, 0xF8	; 248
 5a2:	f3 cf       	rjmp	.-26     	; 0x58a <__addsf3x+0x34>
 5a4:	46 95       	lsr	r20
 5a6:	37 95       	ror	r19
 5a8:	27 95       	ror	r18
 5aa:	a7 95       	ror	r26
 5ac:	f0 40       	sbci	r31, 0x00	; 0
 5ae:	53 95       	inc	r21
 5b0:	c9 f7       	brne	.-14     	; 0x5a4 <__addsf3x+0x4e>
 5b2:	7e f4       	brtc	.+30     	; 0x5d2 <__addsf3x+0x7c>
 5b4:	1f 16       	cp	r1, r31
 5b6:	ba 0b       	sbc	r27, r26
 5b8:	62 0b       	sbc	r22, r18
 5ba:	73 0b       	sbc	r23, r19
 5bc:	84 0b       	sbc	r24, r20
 5be:	ba f0       	brmi	.+46     	; 0x5ee <__addsf3x+0x98>
 5c0:	91 50       	subi	r25, 0x01	; 1
 5c2:	a1 f0       	breq	.+40     	; 0x5ec <__addsf3x+0x96>
 5c4:	ff 0f       	add	r31, r31
 5c6:	bb 1f       	adc	r27, r27
 5c8:	66 1f       	adc	r22, r22
 5ca:	77 1f       	adc	r23, r23
 5cc:	88 1f       	adc	r24, r24
 5ce:	c2 f7       	brpl	.-16     	; 0x5c0 <__addsf3x+0x6a>
 5d0:	0e c0       	rjmp	.+28     	; 0x5ee <__addsf3x+0x98>
 5d2:	ba 0f       	add	r27, r26
 5d4:	62 1f       	adc	r22, r18
 5d6:	73 1f       	adc	r23, r19
 5d8:	84 1f       	adc	r24, r20
 5da:	48 f4       	brcc	.+18     	; 0x5ee <__addsf3x+0x98>
 5dc:	87 95       	ror	r24
 5de:	77 95       	ror	r23
 5e0:	67 95       	ror	r22
 5e2:	b7 95       	ror	r27
 5e4:	f7 95       	ror	r31
 5e6:	9e 3f       	cpi	r25, 0xFE	; 254
 5e8:	08 f0       	brcs	.+2      	; 0x5ec <__addsf3x+0x96>
 5ea:	b3 cf       	rjmp	.-154    	; 0x552 <__addsf3+0x1e>
 5ec:	93 95       	inc	r25
 5ee:	88 0f       	add	r24, r24
 5f0:	08 f0       	brcs	.+2      	; 0x5f4 <__addsf3x+0x9e>
 5f2:	99 27       	eor	r25, r25
 5f4:	ee 0f       	add	r30, r30
 5f6:	97 95       	ror	r25
 5f8:	87 95       	ror	r24
 5fa:	08 95       	ret

000005fc <__divsf3>:
 5fc:	0c d0       	rcall	.+24     	; 0x616 <__divsf3x>
 5fe:	e6 c0       	rjmp	.+460    	; 0x7cc <__fp_round>
 600:	de d0       	rcall	.+444    	; 0x7be <__fp_pscB>
 602:	40 f0       	brcs	.+16     	; 0x614 <__divsf3+0x18>
 604:	d5 d0       	rcall	.+426    	; 0x7b0 <__fp_pscA>
 606:	30 f0       	brcs	.+12     	; 0x614 <__divsf3+0x18>
 608:	21 f4       	brne	.+8      	; 0x612 <__divsf3+0x16>
 60a:	5f 3f       	cpi	r21, 0xFF	; 255
 60c:	19 f0       	breq	.+6      	; 0x614 <__divsf3+0x18>
 60e:	c7 c0       	rjmp	.+398    	; 0x79e <__fp_inf>
 610:	51 11       	cpse	r21, r1
 612:	10 c1       	rjmp	.+544    	; 0x834 <__fp_szero>
 614:	ca c0       	rjmp	.+404    	; 0x7aa <__fp_nan>

00000616 <__divsf3x>:
 616:	eb d0       	rcall	.+470    	; 0x7ee <__fp_split3>
 618:	98 f3       	brcs	.-26     	; 0x600 <__divsf3+0x4>

0000061a <__divsf3_pse>:
 61a:	99 23       	and	r25, r25
 61c:	c9 f3       	breq	.-14     	; 0x610 <__divsf3+0x14>
 61e:	55 23       	and	r21, r21
 620:	b1 f3       	breq	.-20     	; 0x60e <__divsf3+0x12>
 622:	95 1b       	sub	r25, r21
 624:	55 0b       	sbc	r21, r21
 626:	bb 27       	eor	r27, r27
 628:	aa 27       	eor	r26, r26
 62a:	62 17       	cp	r22, r18
 62c:	73 07       	cpc	r23, r19
 62e:	84 07       	cpc	r24, r20
 630:	38 f0       	brcs	.+14     	; 0x640 <__divsf3_pse+0x26>
 632:	9f 5f       	subi	r25, 0xFF	; 255
 634:	5f 4f       	sbci	r21, 0xFF	; 255
 636:	22 0f       	add	r18, r18
 638:	33 1f       	adc	r19, r19
 63a:	44 1f       	adc	r20, r20
 63c:	aa 1f       	adc	r26, r26
 63e:	a9 f3       	breq	.-22     	; 0x62a <__divsf3_pse+0x10>
 640:	33 d0       	rcall	.+102    	; 0x6a8 <__divsf3_pse+0x8e>
 642:	0e 2e       	mov	r0, r30
 644:	3a f0       	brmi	.+14     	; 0x654 <__divsf3_pse+0x3a>
 646:	e0 e8       	ldi	r30, 0x80	; 128
 648:	30 d0       	rcall	.+96     	; 0x6aa <__divsf3_pse+0x90>
 64a:	91 50       	subi	r25, 0x01	; 1
 64c:	50 40       	sbci	r21, 0x00	; 0
 64e:	e6 95       	lsr	r30
 650:	00 1c       	adc	r0, r0
 652:	ca f7       	brpl	.-14     	; 0x646 <__divsf3_pse+0x2c>
 654:	29 d0       	rcall	.+82     	; 0x6a8 <__divsf3_pse+0x8e>
 656:	fe 2f       	mov	r31, r30
 658:	27 d0       	rcall	.+78     	; 0x6a8 <__divsf3_pse+0x8e>
 65a:	66 0f       	add	r22, r22
 65c:	77 1f       	adc	r23, r23
 65e:	88 1f       	adc	r24, r24
 660:	bb 1f       	adc	r27, r27
 662:	26 17       	cp	r18, r22
 664:	37 07       	cpc	r19, r23
 666:	48 07       	cpc	r20, r24
 668:	ab 07       	cpc	r26, r27
 66a:	b0 e8       	ldi	r27, 0x80	; 128
 66c:	09 f0       	breq	.+2      	; 0x670 <__divsf3_pse+0x56>
 66e:	bb 0b       	sbc	r27, r27
 670:	80 2d       	mov	r24, r0
 672:	bf 01       	movw	r22, r30
 674:	ff 27       	eor	r31, r31
 676:	93 58       	subi	r25, 0x83	; 131
 678:	5f 4f       	sbci	r21, 0xFF	; 255
 67a:	2a f0       	brmi	.+10     	; 0x686 <__divsf3_pse+0x6c>
 67c:	9e 3f       	cpi	r25, 0xFE	; 254
 67e:	51 05       	cpc	r21, r1
 680:	68 f0       	brcs	.+26     	; 0x69c <__divsf3_pse+0x82>
 682:	8d c0       	rjmp	.+282    	; 0x79e <__fp_inf>
 684:	d7 c0       	rjmp	.+430    	; 0x834 <__fp_szero>
 686:	5f 3f       	cpi	r21, 0xFF	; 255
 688:	ec f3       	brlt	.-6      	; 0x684 <__divsf3_pse+0x6a>
 68a:	98 3e       	cpi	r25, 0xE8	; 232
 68c:	dc f3       	brlt	.-10     	; 0x684 <__divsf3_pse+0x6a>
 68e:	86 95       	lsr	r24
 690:	77 95       	ror	r23
 692:	67 95       	ror	r22
 694:	b7 95       	ror	r27
 696:	f7 95       	ror	r31
 698:	9f 5f       	subi	r25, 0xFF	; 255
 69a:	c9 f7       	brne	.-14     	; 0x68e <__divsf3_pse+0x74>
 69c:	88 0f       	add	r24, r24
 69e:	91 1d       	adc	r25, r1
 6a0:	96 95       	lsr	r25
 6a2:	87 95       	ror	r24
 6a4:	97 f9       	bld	r25, 7
 6a6:	08 95       	ret
 6a8:	e1 e0       	ldi	r30, 0x01	; 1
 6aa:	66 0f       	add	r22, r22
 6ac:	77 1f       	adc	r23, r23
 6ae:	88 1f       	adc	r24, r24
 6b0:	bb 1f       	adc	r27, r27
 6b2:	62 17       	cp	r22, r18
 6b4:	73 07       	cpc	r23, r19
 6b6:	84 07       	cpc	r24, r20
 6b8:	ba 07       	cpc	r27, r26
 6ba:	20 f0       	brcs	.+8      	; 0x6c4 <__divsf3_pse+0xaa>
 6bc:	62 1b       	sub	r22, r18
 6be:	73 0b       	sbc	r23, r19
 6c0:	84 0b       	sbc	r24, r20
 6c2:	ba 0b       	sbc	r27, r26
 6c4:	ee 1f       	adc	r30, r30
 6c6:	88 f7       	brcc	.-30     	; 0x6aa <__divsf3_pse+0x90>
 6c8:	e0 95       	com	r30
 6ca:	08 95       	ret

000006cc <__fixunssfsi>:
 6cc:	98 d0       	rcall	.+304    	; 0x7fe <__fp_splitA>
 6ce:	88 f0       	brcs	.+34     	; 0x6f2 <__fixunssfsi+0x26>
 6d0:	9f 57       	subi	r25, 0x7F	; 127
 6d2:	90 f0       	brcs	.+36     	; 0x6f8 <__fixunssfsi+0x2c>
 6d4:	b9 2f       	mov	r27, r25
 6d6:	99 27       	eor	r25, r25
 6d8:	b7 51       	subi	r27, 0x17	; 23
 6da:	a0 f0       	brcs	.+40     	; 0x704 <__fixunssfsi+0x38>
 6dc:	d1 f0       	breq	.+52     	; 0x712 <__fixunssfsi+0x46>
 6de:	66 0f       	add	r22, r22
 6e0:	77 1f       	adc	r23, r23
 6e2:	88 1f       	adc	r24, r24
 6e4:	99 1f       	adc	r25, r25
 6e6:	1a f0       	brmi	.+6      	; 0x6ee <__fixunssfsi+0x22>
 6e8:	ba 95       	dec	r27
 6ea:	c9 f7       	brne	.-14     	; 0x6de <__fixunssfsi+0x12>
 6ec:	12 c0       	rjmp	.+36     	; 0x712 <__fixunssfsi+0x46>
 6ee:	b1 30       	cpi	r27, 0x01	; 1
 6f0:	81 f0       	breq	.+32     	; 0x712 <__fixunssfsi+0x46>
 6f2:	9f d0       	rcall	.+318    	; 0x832 <__fp_zero>
 6f4:	b1 e0       	ldi	r27, 0x01	; 1
 6f6:	08 95       	ret
 6f8:	9c c0       	rjmp	.+312    	; 0x832 <__fp_zero>
 6fa:	67 2f       	mov	r22, r23
 6fc:	78 2f       	mov	r23, r24
 6fe:	88 27       	eor	r24, r24
 700:	b8 5f       	subi	r27, 0xF8	; 248
 702:	39 f0       	breq	.+14     	; 0x712 <__fixunssfsi+0x46>
 704:	b9 3f       	cpi	r27, 0xF9	; 249
 706:	cc f3       	brlt	.-14     	; 0x6fa <__fixunssfsi+0x2e>
 708:	86 95       	lsr	r24
 70a:	77 95       	ror	r23
 70c:	67 95       	ror	r22
 70e:	b3 95       	inc	r27
 710:	d9 f7       	brne	.-10     	; 0x708 <__fixunssfsi+0x3c>
 712:	3e f4       	brtc	.+14     	; 0x722 <__fixunssfsi+0x56>
 714:	90 95       	com	r25
 716:	80 95       	com	r24
 718:	70 95       	com	r23
 71a:	61 95       	neg	r22
 71c:	7f 4f       	sbci	r23, 0xFF	; 255
 71e:	8f 4f       	sbci	r24, 0xFF	; 255
 720:	9f 4f       	sbci	r25, 0xFF	; 255
 722:	08 95       	ret

00000724 <__floatunsisf>:
 724:	e8 94       	clt
 726:	09 c0       	rjmp	.+18     	; 0x73a <__floatsisf+0x12>

00000728 <__floatsisf>:
 728:	97 fb       	bst	r25, 7
 72a:	3e f4       	brtc	.+14     	; 0x73a <__floatsisf+0x12>
 72c:	90 95       	com	r25
 72e:	80 95       	com	r24
 730:	70 95       	com	r23
 732:	61 95       	neg	r22
 734:	7f 4f       	sbci	r23, 0xFF	; 255
 736:	8f 4f       	sbci	r24, 0xFF	; 255
 738:	9f 4f       	sbci	r25, 0xFF	; 255
 73a:	99 23       	and	r25, r25
 73c:	a9 f0       	breq	.+42     	; 0x768 <__floatsisf+0x40>
 73e:	f9 2f       	mov	r31, r25
 740:	96 e9       	ldi	r25, 0x96	; 150
 742:	bb 27       	eor	r27, r27
 744:	93 95       	inc	r25
 746:	f6 95       	lsr	r31
 748:	87 95       	ror	r24
 74a:	77 95       	ror	r23
 74c:	67 95       	ror	r22
 74e:	b7 95       	ror	r27
 750:	f1 11       	cpse	r31, r1
 752:	f8 cf       	rjmp	.-16     	; 0x744 <__floatsisf+0x1c>
 754:	fa f4       	brpl	.+62     	; 0x794 <__floatsisf+0x6c>
 756:	bb 0f       	add	r27, r27
 758:	11 f4       	brne	.+4      	; 0x75e <__floatsisf+0x36>
 75a:	60 ff       	sbrs	r22, 0
 75c:	1b c0       	rjmp	.+54     	; 0x794 <__floatsisf+0x6c>
 75e:	6f 5f       	subi	r22, 0xFF	; 255
 760:	7f 4f       	sbci	r23, 0xFF	; 255
 762:	8f 4f       	sbci	r24, 0xFF	; 255
 764:	9f 4f       	sbci	r25, 0xFF	; 255
 766:	16 c0       	rjmp	.+44     	; 0x794 <__floatsisf+0x6c>
 768:	88 23       	and	r24, r24
 76a:	11 f0       	breq	.+4      	; 0x770 <__floatsisf+0x48>
 76c:	96 e9       	ldi	r25, 0x96	; 150
 76e:	11 c0       	rjmp	.+34     	; 0x792 <__floatsisf+0x6a>
 770:	77 23       	and	r23, r23
 772:	21 f0       	breq	.+8      	; 0x77c <__floatsisf+0x54>
 774:	9e e8       	ldi	r25, 0x8E	; 142
 776:	87 2f       	mov	r24, r23
 778:	76 2f       	mov	r23, r22
 77a:	05 c0       	rjmp	.+10     	; 0x786 <__floatsisf+0x5e>
 77c:	66 23       	and	r22, r22
 77e:	71 f0       	breq	.+28     	; 0x79c <__floatsisf+0x74>
 780:	96 e8       	ldi	r25, 0x86	; 134
 782:	86 2f       	mov	r24, r22
 784:	70 e0       	ldi	r23, 0x00	; 0
 786:	60 e0       	ldi	r22, 0x00	; 0
 788:	2a f0       	brmi	.+10     	; 0x794 <__floatsisf+0x6c>
 78a:	9a 95       	dec	r25
 78c:	66 0f       	add	r22, r22
 78e:	77 1f       	adc	r23, r23
 790:	88 1f       	adc	r24, r24
 792:	da f7       	brpl	.-10     	; 0x78a <__floatsisf+0x62>
 794:	88 0f       	add	r24, r24
 796:	96 95       	lsr	r25
 798:	87 95       	ror	r24
 79a:	97 f9       	bld	r25, 7
 79c:	08 95       	ret

0000079e <__fp_inf>:
 79e:	97 f9       	bld	r25, 7
 7a0:	9f 67       	ori	r25, 0x7F	; 127
 7a2:	80 e8       	ldi	r24, 0x80	; 128
 7a4:	70 e0       	ldi	r23, 0x00	; 0
 7a6:	60 e0       	ldi	r22, 0x00	; 0
 7a8:	08 95       	ret

000007aa <__fp_nan>:
 7aa:	9f ef       	ldi	r25, 0xFF	; 255
 7ac:	80 ec       	ldi	r24, 0xC0	; 192
 7ae:	08 95       	ret

000007b0 <__fp_pscA>:
 7b0:	00 24       	eor	r0, r0
 7b2:	0a 94       	dec	r0
 7b4:	16 16       	cp	r1, r22
 7b6:	17 06       	cpc	r1, r23
 7b8:	18 06       	cpc	r1, r24
 7ba:	09 06       	cpc	r0, r25
 7bc:	08 95       	ret

000007be <__fp_pscB>:
 7be:	00 24       	eor	r0, r0
 7c0:	0a 94       	dec	r0
 7c2:	12 16       	cp	r1, r18
 7c4:	13 06       	cpc	r1, r19
 7c6:	14 06       	cpc	r1, r20
 7c8:	05 06       	cpc	r0, r21
 7ca:	08 95       	ret

000007cc <__fp_round>:
 7cc:	09 2e       	mov	r0, r25
 7ce:	03 94       	inc	r0
 7d0:	00 0c       	add	r0, r0
 7d2:	11 f4       	brne	.+4      	; 0x7d8 <__fp_round+0xc>
 7d4:	88 23       	and	r24, r24
 7d6:	52 f0       	brmi	.+20     	; 0x7ec <__fp_round+0x20>
 7d8:	bb 0f       	add	r27, r27
 7da:	40 f4       	brcc	.+16     	; 0x7ec <__fp_round+0x20>
 7dc:	bf 2b       	or	r27, r31
 7de:	11 f4       	brne	.+4      	; 0x7e4 <__fp_round+0x18>
 7e0:	60 ff       	sbrs	r22, 0
 7e2:	04 c0       	rjmp	.+8      	; 0x7ec <__fp_round+0x20>
 7e4:	6f 5f       	subi	r22, 0xFF	; 255
 7e6:	7f 4f       	sbci	r23, 0xFF	; 255
 7e8:	8f 4f       	sbci	r24, 0xFF	; 255
 7ea:	9f 4f       	sbci	r25, 0xFF	; 255
 7ec:	08 95       	ret

000007ee <__fp_split3>:
 7ee:	57 fd       	sbrc	r21, 7
 7f0:	90 58       	subi	r25, 0x80	; 128
 7f2:	44 0f       	add	r20, r20
 7f4:	55 1f       	adc	r21, r21
 7f6:	59 f0       	breq	.+22     	; 0x80e <__fp_splitA+0x10>
 7f8:	5f 3f       	cpi	r21, 0xFF	; 255
 7fa:	71 f0       	breq	.+28     	; 0x818 <__fp_splitA+0x1a>
 7fc:	47 95       	ror	r20

000007fe <__fp_splitA>:
 7fe:	88 0f       	add	r24, r24
 800:	97 fb       	bst	r25, 7
 802:	99 1f       	adc	r25, r25
 804:	61 f0       	breq	.+24     	; 0x81e <__fp_splitA+0x20>
 806:	9f 3f       	cpi	r25, 0xFF	; 255
 808:	79 f0       	breq	.+30     	; 0x828 <__fp_splitA+0x2a>
 80a:	87 95       	ror	r24
 80c:	08 95       	ret
 80e:	12 16       	cp	r1, r18
 810:	13 06       	cpc	r1, r19
 812:	14 06       	cpc	r1, r20
 814:	55 1f       	adc	r21, r21
 816:	f2 cf       	rjmp	.-28     	; 0x7fc <__fp_split3+0xe>
 818:	46 95       	lsr	r20
 81a:	f1 df       	rcall	.-30     	; 0x7fe <__fp_splitA>
 81c:	08 c0       	rjmp	.+16     	; 0x82e <__fp_splitA+0x30>
 81e:	16 16       	cp	r1, r22
 820:	17 06       	cpc	r1, r23
 822:	18 06       	cpc	r1, r24
 824:	99 1f       	adc	r25, r25
 826:	f1 cf       	rjmp	.-30     	; 0x80a <__fp_splitA+0xc>
 828:	86 95       	lsr	r24
 82a:	71 05       	cpc	r23, r1
 82c:	61 05       	cpc	r22, r1
 82e:	08 94       	sec
 830:	08 95       	ret

00000832 <__fp_zero>:
 832:	e8 94       	clt

00000834 <__fp_szero>:
 834:	bb 27       	eor	r27, r27
 836:	66 27       	eor	r22, r22
 838:	77 27       	eor	r23, r23
 83a:	cb 01       	movw	r24, r22
 83c:	97 f9       	bld	r25, 7
 83e:	08 95       	ret

00000840 <__udivmodsi4>:
 840:	a1 e2       	ldi	r26, 0x21	; 33
 842:	1a 2e       	mov	r1, r26
 844:	aa 1b       	sub	r26, r26
 846:	bb 1b       	sub	r27, r27
 848:	fd 01       	movw	r30, r26
 84a:	0d c0       	rjmp	.+26     	; 0x866 <__udivmodsi4_ep>

0000084c <__udivmodsi4_loop>:
 84c:	aa 1f       	adc	r26, r26
 84e:	bb 1f       	adc	r27, r27
 850:	ee 1f       	adc	r30, r30
 852:	ff 1f       	adc	r31, r31
 854:	a2 17       	cp	r26, r18
 856:	b3 07       	cpc	r27, r19
 858:	e4 07       	cpc	r30, r20
 85a:	f5 07       	cpc	r31, r21
 85c:	20 f0       	brcs	.+8      	; 0x866 <__udivmodsi4_ep>
 85e:	a2 1b       	sub	r26, r18
 860:	b3 0b       	sbc	r27, r19
 862:	e4 0b       	sbc	r30, r20
 864:	f5 0b       	sbc	r31, r21

00000866 <__udivmodsi4_ep>:
 866:	66 1f       	adc	r22, r22
 868:	77 1f       	adc	r23, r23
 86a:	88 1f       	adc	r24, r24
 86c:	99 1f       	adc	r25, r25
 86e:	1a 94       	dec	r1
 870:	69 f7       	brne	.-38     	; 0x84c <__udivmodsi4_loop>
 872:	60 95       	com	r22
 874:	70 95       	com	r23
 876:	80 95       	com	r24
 878:	90 95       	com	r25
 87a:	9b 01       	movw	r18, r22
 87c:	ac 01       	movw	r20, r24
 87e:	bd 01       	movw	r22, r26
 880:	cf 01       	movw	r24, r30
 882:	08 95       	ret

00000884 <_exit>:
 884:	f8 94       	cli

00000886 <__stop_program>:
 886:	ff cf       	rjmp	.-2      	; 0x886 <__stop_program>
